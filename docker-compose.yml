version: "3.9"

services:
  #############################################################################################
  ###                                 TrafficCourt BACKEND                                  ###
  #############################################################################################

  #############################################################################################
  ### Citizen API                                                                           ###
  #############################################################################################
  citizen-api:
    container_name: citizen-api
    build:
      context: ./src/backend/TrafficCourts
      dockerfile: ./Citizen.Service/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      ASPNETCORE_URLS: http://*:8080
      FORMRECOGNIZER__APIVERSION: ${FORMRECOGNIZER__APIVERSION:-}
      FORMRECOGNIZER__ENDPOINT: ${FORMRECOGNIZER__ENDPOINT:-}
      FORMRECOGNIZER__MODELID: ${FORMRECOGNIZER__MODELID:-}
      FORMRECOGNIZER__BILLING_URL: ${FORMRECOGNIZER__BILLING_URL:-}
      FORMRECOGNIZER__APIKEY: ${FORMRECOGNIZER__APIKEY:-}
      MASSTRANSIT__TRANSPORT: ${MASSTRANSIT__TRANSPORT:-RabbitMq}
      RABBITMQ__HOST: rabbitmq
      RABBITMQ__PORT: 5672
      RABBITMQ__USERNAME: ${RABBITMQ__USERNAME:-guest}
      RABBITMQ__PASSWORD: ${RABBITMQ__PASSWORD:-guest}
      REDIS__CONNECTIONSTRING: ${REDIS__CONNECTIONSTRING:-redis:6379,password=password}
      TICKETSTORAGE: ${TICKETSTORAGE:-ObjectStore}
      OBJECTSTORAGE__ENDPOINT: ${OBJECTSTORAGE__ENDPOINT:-minio:9000}
      OBJECTSTORAGE__ACCESSKEY: ${OBJECTSTORAGE__ACCESSKEY:-username}
      OBJECTSTORAGE__SECRETKEY: ${OBJECTSTORAGE__SECRETKEY:-password}
      OBJECTSTORAGE__BUCKETNAME: ${OBJECTSTORAGE__ENDPOINT:-traffic-ticket-dev}
      OBJECTSTORAGE__SSL: ${OBJECTSTORAGE__SSL:-false}
    ports:
      - "5000:8080"
    restart: always
    depends_on: [rabbitmq, redis, minio-init]
    volumes:
      # mount the current users usersecrets folder
      - "${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro"

  #############################################################################################
  ### Staff API                                                                             ###
  #############################################################################################
  staff-api:
    container_name: staff-api
    build:
      context: ./src/backend/TrafficCourts
      dockerfile: ./Staff.Service/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      ASPNETCORE_URLS: http://*:8080
      ORACLEDATAAPI__BASEURL: ${ORACLEDATAAPI__BASEURL:-http://oracle-data-api:8080/}
      MASSTRANSIT__TRANSPORT: ${MASSTRANSIT__TRANSPORT:-RabbitMq}
      RABBITMQ__HOST: rabbitmq
      RABBITMQ__PORT: 5672
      RABBITMQ__USERNAME: ${RABBITMQ__USERNAME:-guest}
      RABBITMQ__PASSWORD: ${RABBITMQ__PASSWORD:-guest}
      JWT__AUDIENCE: ${JWT__AUDIENCE:-staff-api}
      JWT__AUTHORITY: ${JWT__AUTHORITY:-https://oidc-0198bb-dev.apps.silver.devops.gov.bc.ca/realms/traffic-court}
      REDIS__CONNECTIONSTRING: ${REDIS__CONNECTIONSTRING:-redis:6379,password=password}
      TICKETSTORAGE__TYPE: ${TICKETSTORAGE__TYPE:-ObjectStore}
      OBJECTSTORAGE__ENDPOINT: ${OBJECTSTORAGE__ENDPOINT:-minio:9000}
      OBJECTSTORAGE__ACCESSKEY: ${OBJECTSTORAGE__ACCESSKEY:-username}
      OBJECTSTORAGE__SECRETKEY: ${OBJECTSTORAGE__SECRETKEY:-password}
      OBJECTSTORAGE__BUCKETNAME: ${OBJECTSTORAGE__BUCKETNAME:-traffic-ticket-dev}
      OBJECTSTORAGE__SSL: ${OBJECTSTORAGE__SSL:-false}
    ports:
      - "5005:8080"
    restart: always
    depends_on:
      - oracle-data-api    
        
  # ---------------------------------------------------------------------------------------------
  # ARC Dispute API
  # ---------------------------------------------------------------------------------------------
  arc-dispute-api:
    container_name: arc-dispute-api
    build:
      context: ./src/backend/TrafficCourts
      dockerfile: ./TrafficCourts.Arc.Dispute.Service/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      ASPNETCORE_URLS: http://+:8080
      SFTP__HOST: ${SFTP__HOST:-sftp}
      SFTP__PORT: ${SFTP__PORT:-22}
      SFTP__USERNAME: ${SFTP__USERNAME:-demo}
      SFTP__PASSWORD: ${SFTP__PASSWORD:-demo}
      SFTP__SSHPRIVATEKEYPATH: ${SFTP__SSHPRIVATEKEYPATH-}
    ports:
      - "5300:8080"
    restart: always
    depends_on: [sftp]
    volumes:
      # mount the current users usersecrets folder
      - "${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro"
      
  sftp:
    container_name: sftp
    image: "emberstack/sftp"
    ports:
      - "22:22"
    volumes:
      - ./.docker/sftp.json:/app/config/sample/sftp.json:ro
      - ./sftp-in:/home/demo/sftp
      
  # ---------------------------------------------------------------------------------------------
  # Workflow Service
  # ---------------------------------------------------------------------------------------------
  workflow-service:
    container_name: workflow-service
    build:
      context: ./src/backend/TrafficCourts
      dockerfile: ./Workflow.Service/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      RABBITMQ__HOST: ${RABBITMQCONFIG__HOST:-rabbitmq}
      RETRYCONFIGURATION__RETRYTIMES: ${RETRYCONFIGURATION__RETRYTIMES:-5}
      RETRYCONFIGURATION__RETRYINTERVAL: ${RETRYCONFIGURATION__RETRYINTERVAL:-2}
      RETRYCONFIGURATION__CONCURRENCYLIMIT: ${RETRYCONFIGURATION__CONCURRENCYLIMIT:-2}
      ORACLEDATAAPI__BASEURL: ${ORACLEDATAAPI__BASEURL:-http://oracle-data-api:8080/}
    ports:
      - "5020:8080"
    restart: always
    depends_on: [rabbitmq]

  #############################################################################################
  ###                           Oracle Data API                                             ###
  #############################################################################################
  oracle-data-api:
    container_name: oracle-data-api
    build:
      context: ./src/backend/oracle-data-api
      args:
        - SKIP_TESTS=true
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password
      CODETABLE_REFRESH_ENABLED: ${CODETABLE_REFRESH_ENABLED:-true}
      CODETABLE_REFRESH_CRON: ${CODETABLE_REFRESH_CRON:-0 0/15 * * * *}
      H2_DATASOURCE: ${H2_DATASOURCE:-jdbc:h2:file:./data/h2-v2}
      SPRING_SLEUTH_ENABLED: ${SPRING_SLEUTH_ENABLED:-false}
      JAVA_OPTS: ${JAVA_OPTS:--Dlogging.level.ca.bc.gov.open.jag.tco.oracledataapi=DEBUG}
    depends_on:
      - redis
    ports:
      - "5010:8080"
    volumes:
      - data-oracle:/data

  #############################################################################################
  ###                                 TrafficCourt FRONTEND                                 ###
  #############################################################################################
  citizen-portal:
    container_name: citizen-portal
    build:
      context: ./src/frontend/citizen-portal
      args:
        - API_BASE_PATH=${API_BASE_PATH:-http://citizen-api:8080/api/}
    restart: always
    ports:
      - "8080:8080"
    ## following is used for testing nginx.conf locally. No need to build the citizen-portal every
    ## time we change the nginx.conf, start a shell in the container and run 'service nginx reload' or '/etc/init.d/nginx reload'
    #volumes:
    #  - ./src/frontend/citizen-portal/nginx.conf:/opt/app-root/etc/nginx.default.d/default.conf
    depends_on: [citizen-api]

  #############################################################################################
  ###                                 TrafficCourt Staff FRONTEND                           ###
  #############################################################################################
  staff-portal:
    container_name: staff-portal
    build:
      context: ./src/frontend/staff-portal
      args:
        - API_BASE_PATH=${API_BASE_PATH:-http://staff-api:8080/api/}
    restart: always
    ports:
      - "8081:8080"
    depends_on: [staff-api]
    
  #############################################################################################
  ###                           RABBITMQ                                                    ###
  #############################################################################################
  rabbitmq:
    image: rabbitmq:3.9.12-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - data-rabbit:/var/lib/rabbitmq/mnesia/rabbit@app-rabbitmq:cached
    restart: always

  #############################################################################################
  ###                           Minio                                                       ###
  ###                                                                                       ###
  ### MINIO_SITE_REGION - not sure if this is required, but matching what is in the client  ###
  #############################################################################################
  minio:
    container_name: minio
    image: minio/minio
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - type: bind
        source: ./tools/minio
        target: /data
    environment:
      MINIO_ROOT_USER: "username" 
      MINIO_ROOT_PASSWORD: "password"
      MINIO_SITE_REGION: "BC"
    command: server /data --console-address ":9001"

  minio-init:
    container_name: minio-init
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set dockerminio http://minio:9000 username password;
      /usr/bin/mc mb dockerminio/traffic-ticket-dev;
      /usr/bin/mc policy set public dockerminio/traffic-ticket-dev;
      exit 0;
      "

  #############################################################################################
  ###                                 REDIS server and UI                                   ###
  #############################################################################################
  redis:
    container_name: redis
    image: 'bitnami/redis:latest'
    environment:
      - REDIS_PASSWORD=password
    ports:
      - 6379:6379
      
  redis-ui:
    container_name: redis-ui
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=password
    depends_on:
      - redis
    ports:
      - 8082:8081

volumes:
  data-rabbit:
  data-redis:
  data-oracle:
