version: "3.9"

services:
  #############################################################################################
  ###                                 TrafficCourt BACKEND                                  ###
  #############################################################################################

  #############################################################################################
  ### Citizen API                                                                           ###
  #############################################################################################
  citizen-api:
    container_name: citizen-api
    build:
      context: ./src/backend/TrafficCourts
      dockerfile: ./Citizen.Service/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      ASPNETCORE_URLS: http://*:8080
      COMS__BASEURL: ${COMS__BASEURL:-http://coms:3000}
      COMS__USERNAME: ${COMS__USERNAME:-username}
      COMS__PASSWORD: ${COMS__PASSWORD:-password}
      FORMRECOGNIZER__APIVERSION: ${FORMRECOGNIZER__APIVERSION:-}
      FORMRECOGNIZER__ENDPOINT: ${FORMRECOGNIZER__ENDPOINT:-}
      FORMRECOGNIZER__MODELID: ${FORMRECOGNIZER__MODELID:-}
      FORMRECOGNIZER__BILLING_URL: ${FORMRECOGNIZER__BILLING_URL:-}
      FORMRECOGNIZER__APIKEY: ${FORMRECOGNIZER__APIKEY:-}
      FORMRECOGNIZER__TIMEOUT: ${FORMRECOGNIZER__TIMEOUT:-120}
      MASSTRANSIT__TRANSPORT: ${MASSTRANSIT__TRANSPORT:-RabbitMq}
      RABBITMQ__HOST: rabbitmq
      RABBITMQ__PORT: 5672
      RABBITMQ__USERNAME: ${RABBITMQ__USERNAME:-guest}
      RABBITMQ__PASSWORD: ${RABBITMQ__PASSWORD:-guest}
      REDIS__CONNECTIONSTRING: ${REDIS__CONNECTIONSTRING:-redis:6379,password=password}
      TICKETSEARCH__SEARCHTYPE: ${TICKETSEARCH__SEARCHTYPE:-Mock}
      JWT__AUTHORITY: ${JWT__AUTHORITY:-https://idtest.gov.bc.ca/login}     
      JWT__AUDIENCE: ${JWT__AUDIENCE:-ca.bc.gov.ag.tco.dev}
      OAuth__USERINFOENDPOINT: ${OAuth__USERINFOENDPOINT:-https://idtest.gov.bc.ca/oauth2/userinfo}
      HASHIDS__SALT: ${HASHIDS__SALT:-00000000000000000000000000000000}
      SERILOG__USING__0: Serilog.Sinks.Console
      SERILOG__WRITETO__0__ARGS__OUTPUTTEMPLATE: "[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj} <s:{SourceContext}>{NewLine}{Exception}"
      SERILOG__WRITETO__0__ARGS__THEME: Serilog.Sinks.SystemConsole.Themes.ConsoleTheme::None, Serilog.Sinks.Console
      SERILOG__WRITETO__0__NAME: Console      
      SERILOG__MINIMUMLEVEL__DEFAULT: ${SERILOG__MINIMUMLEVEL__DEFAULT:-Information} 
    ports:
      - "5080:8080"
    restart: always
    depends_on:
      coms:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # mount the current users usersecrets folder
      - "${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro"

  #############################################################################################
  ### Staff API                                                                             ###
  #############################################################################################
  staff-api:
    container_name: staff-api
    build:
      context: ./src/backend/TrafficCourts
      dockerfile: ./Staff.Service/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      ASPNETCORE_URLS: http://*:8080
      ORACLEDATAAPI__BASEURL: ${ORACLEDATAAPI__BASEURL:-http://oracle-data-api:8080/}
      COMS__BASEURL: ${COMS__BASEURL:-http://coms:3000}
      COMS__USERNAME: ${COMS__USERNAME:-username}
      COMS__PASSWORD: ${COMS__PASSWORD:-password}
      MASSTRANSIT__TRANSPORT: ${MASSTRANSIT__TRANSPORT:-RabbitMq}
      RABBITMQ__HOST: rabbitmq
      RABBITMQ__PORT: 5672
      RABBITMQ__USERNAME: ${RABBITMQ__USERNAME:-guest}
      RABBITMQ__PASSWORD: ${RABBITMQ__PASSWORD:-guest}
      JWT__AUDIENCE: ${JWT__AUDIENCE:-staff-api}
      JWT__AUTHORITY: ${JWT__AUTHORITY:-https://oidc-0198bb-dev.apps.silver.devops.gov.bc.ca/realms/traffic-court}     
      KEYCLOAKADMINAPI__BASEURI: ${KEYCLOAKADMINAPI__BASEURI:-https://oidc-0198bb-dev.apps.silver.devops.gov.bc.ca/admin/realms/}
      KEYCLOAKADMINAPI__REALM: ${KEYCLOAKADMINAPI__REALM:-traffic-court}
      OAUTH__TOKENENDPOINT: ${OAUTH__TOKENURI:-https://oidc-0198bb-dev.apps.silver.devops.gov.bc.ca/realms/traffic-court/protocol/openid-connect/token}
      OAUTH__CLIENTID: ${OAUTH__CLIENTID:-staff-api}
      OAUTH__CLIENTSECRET: ${OAUTH__CLIENTSECRET:-}      
      REDIS__CONNECTIONSTRING: ${REDIS__CONNECTIONSTRING:-redis:6379,password=password}
      SERILOG__USING__0: Serilog.Sinks.Console
      SERILOG__WRITETO__0__ARGS__OUTPUTTEMPLATE: "[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj} <s:{SourceContext}>{NewLine}{Exception}"
      SERILOG__WRITETO__0__ARGS__THEME: Serilog.Sinks.SystemConsole.Themes.ConsoleTheme::None, Serilog.Sinks.Console
      SERILOG__WRITETO__0__NAME: Console
      SERILOG__MINIMUMLEVEL__DEFAULT: ${SERILOG__MINIMUMLEVEL__DEFAULT:-Information} 
      TICKETSEARCH__SEARCHTYPE: ${TICKETSEARCH__SEARCHTYPE:-Mock}
      CDOGS__CLIENTID: ${CDOGS__CLIENTID:-cdogs}
      CDOGS__CLIENTSECRET: ${CDOGS__CLIENTSECRET:-}
      CDOGS__ENDPOINT: ${CDOGS__ENDPOINT:-https://cdogs-dev.api.gov.bc.ca/api}
      CDOGS__TOKENENDPOINT: ${CDOGS__TOKENENDPOINT:-https://dev.loginproxy.gov.bc.ca/auth/realms/comsvcauth/protocol/openid-connect/token}
    ports:
      - "5090:8080"
    restart: always
    depends_on:
      oracle-data-api:
        condition: service_healthy
      coms:
        condition: service_healthy
        
  # ###########################################################################################
  # ARC Dispute API                                                                         ###
  # ###########################################################################################
  arc-dispute-api:
    container_name: arc-dispute-api
    build:
      context: ./src/backend/TrafficCourts
      dockerfile: ./TrafficCourts.Arc.Dispute.Service/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      ASPNETCORE_URLS: http://+:8080
      SFTP__HOST: ${SFTP__HOST:-sftp}
      SFTP__PORT: ${SFTP__PORT:-22}
      SFTP__USERNAME: ${SFTP__USERNAME:-demo}
      SFTP__PASSWORD: ${SFTP__PASSWORD:-demo}
      SFTP__SSHPRIVATEKEYPATH: ${SFTP__SSHPRIVATEKEYPATH-}
    ports:
      - "5030:8080"
    restart: always
    depends_on:
      - sftp
    volumes:
      # mount the current users usersecrets folder
      - "${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro"

  sftp:
    container_name: sftp
    image: "emberstack/sftp"
    ports:
      - "22000:22"
    volumes:
      - ./.docker/sftp.json:/app/config/sample/sftp.json:ro
      - ./sftp-in:/home/demo/sftp
      
  # ###########################################################################################
  # Workflow Service                                                                        ###
  # ###########################################################################################
  workflow-service:
    container_name: workflow-service
    build:
      context: ./src/backend/TrafficCourts
      dockerfile: ./Workflow.Service/Dockerfile
    environment:
      CONNECTIONSTRINGS__SAGA: ${CONNECTIONSTRINGS__SAGA:-Host=app-db;Username=postgres;Password=password;Database=appdb}
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      MASSTRANSIT__TRANSPORT: ${MASSTRANSIT__TRANSPORT:-RabbitMq}
      RABBITMQ__HOST: ${RABBITMQCONFIG__HOST:-rabbitmq}
      REDIS__CONNECTIONSTRING: ${REDIS__CONNECTIONSTRING:-redis:6379,password=password}
      RETRYCONFIGURATION__RETRYTIMES: ${RETRYCONFIGURATION__RETRYTIMES:-5}
      RETRYCONFIGURATION__RETRYINTERVAL: ${RETRYCONFIGURATION__RETRYINTERVAL:-2}
      RETRYCONFIGURATION__CONCURRENCYLIMIT: ${RETRYCONFIGURATION__CONCURRENCYLIMIT:-2}
      ORACLEDATAAPI__BASEURL: ${ORACLEDATAAPI__BASEURL:-http://oracle-data-api:8080/}
      ARCAPICONFIGURATION__HOST: ${ARCAPICONFIGURATION__HOST:-arc-dispute-api}
      ARCAPICONFIGURATION__PORT: ${ARCAPICONFIGURATION__PORT:-8080}
      VIRUSSCAN__BASEURL: ${VIRUSSCAN__BASEURL:-http://virus-scan-service:8080/}
      COMS__BASEURL: ${COMS__BASEURL:-http://coms:3000}
      COMS__USERNAME: ${COMS__USERNAME:-username}
      COMS__PASSWORD: ${COMS__PASSWORD:-password}
      SMTPCONFIGURATION__HOST: ${SMTPCONFIGURATION__HOST:-smtp-server}
      SMTPCONFIGURATION__PORT: ${SMTPCONFIGURATION__PORT:-5025}
      EMAILCONFIGURATION__SENDER: ${EMAILCONFIGURATION__SENDER:-DoNotReply@gov.bc.ca}
      EMAILCONFIGURATION__ALLOWLIST: ${EMAILCONFIGURATION__ALLOWLIST:-}
      EMAILCONFIGURATION__EMAILVERIFICATIONURL: ${EMAILCONFIGURATION__EMAILVERIFICATIONURL:-http://localhost:8080/email/verify}
      HASHIDS__SALT: ${HASHIDS__SALT:-00000000000000000000000000000000}
      SERILOG__USING__0: Serilog.Sinks.Console
      SERILOG__WRITETO__0__ARGS__OUTPUTTEMPLATE: "[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj} <s:{SourceContext}>{NewLine}{Exception}"
      SERILOG__WRITETO__0__ARGS__THEME: Serilog.Sinks.SystemConsole.Themes.ConsoleTheme::None, Serilog.Sinks.Console
      SERILOG__WRITETO__0__NAME: Console
      SERILOG__MINIMUMLEVEL__DEFAULT: ${SERILOG__MINIMUMLEVEL__DEFAULT:-Information} 
    ports:
      - "5020:8080"
    restart: always
    depends_on:
      app-db:
        condition: service_healthy
      coms:
        condition: service_healthy
      oracle-data-api:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  #############################################################################################
  ###                           Oracle Data API                                             ###
  #############################################################################################
  oracle-data-api:
    container_name: oracle-data-api
    build:
      context: ./src/backend/oracle-data-api
      args:
        - SKIP_TESTS=true
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password
      REDIS_CLUSTER_NODES: ${REDIS_CLUSTER_NODES:-}
      REDIS_CLUSTER_MAX_REDIRECTS: ${REDIS_CLUSTER_MAX_REDIRECTS:-}
      CODETABLE_REFRESH_ENABLED: ${CODETABLE_REFRESH_ENABLED:-true}
      CODETABLE_REFRESH_CRON: ${CODETABLE_REFRESH_CRON:-0 0/15 * * * *}
      UNASSIGN_DISPUTES_ENABLED: ${UNASSIGN_DISPUTES_ENABLED:-true}
      H2_DATASOURCE: ${H2_DATASOURCE:-jdbc:h2:mem:testdb}
      ORDS_API_AUTH_ENABLED: ${ORDS_API_AUTH_ENABLED:-false}
      ORDS_API_DEBUG: ${ORDS_API_DEBUG:-false}
      ORDS_API_OCCAM_URL: ${ORDS_API_OCCAM_URL:-}
      ORDS_API_OCCAM_USERNAME: ${ORDS_API_OCCAM_USERNAME:-username}
      ORDS_API_OCCAM_PASSWORD: ${ORDS_API_OCCAM_PASSWORD:-password}
      ORDS_API_TCO_URL: ${ORDS_API_TCO_URL:-}
      ORDS_API_TCO_USERNAME: ${ORDS_API_TCO_USERNAME:-username}
      ORDS_API_TCO_PASSWORD: ${ORDS_API_TCO_PASSWORD:-password}
      ORDS_API_TIMEOUT_MS: ${ORDS_API_TIMEOUT_MS:-2000}
      ORDS_API_RETRY_COUNT: ${ORDS_API_RETRY_COUNT:-3}
      ORDS_API_RETRY_DELAY_SEC: ${ORDS_API_RETRY_DELAY_SEC:-5}
      SPRING_SLEUTH_ENABLED: ${SPRING_SLEUTH_ENABLED:-false}
      JAVA_OPTS: ${JAVA_OPTS:--Dlogging.level.ca.bc.gov.open.jag.tco.oracledataapi=DEBUG -Dlogging.level.org.hibernate.SQL=DEBUG}
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "5010:8080"
      - "8000:8000"
    volumes:
      - data-oracle:/data

  # ---------------------------------------------------------------------------------------------
  # Virus Scanner
  # ---------------------------------------------------------------------------------------------
  virus-scan-service:
    container_name: virus-scan-service
    build:
      context: ./src/backend/bc-gov-virus-scan
      dockerfile: ./BCGov.VirusScan.Api/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      ASPNETCORE_URLS: http://*:8080
      CLAMAV__SERVER: ${CLAMAV__SERVER:-clamav}
      #LOGGING__LOGLEVEL__DEFAULT: Debug
    ports:
      - "5040:8080"
    depends_on:
      clamav:
        condition: service_healthy

  #############################################################################################
  ###                                 TrafficCourt FRONTEND                                 ###
  #############################################################################################
  citizen-portal:
    container_name: citizen-portal
    build:
      context: ./src/frontend/citizen-portal
    restart: always
    ports:
      - "8080:8080"
    ## following is used for testing nginx.conf locally. No need to build the citizen-portal every
    ## time we change the nginx.conf, start a shell in the container and run 'service nginx reload' or '/etc/init.d/nginx reload'
    #volumes:
    #  - ./src/frontend/citizen-portal/nginx.conf:/opt/app-root/etc/nginx.default.d/default.conf
    depends_on:
      - citizen-api

  #############################################################################################
  ###                                 TrafficCourt Staff FRONTEND                           ###
  #############################################################################################
  staff-portal:
    container_name: staff-portal
    build:
      context: ./src/frontend/staff-portal
    restart: always
    ports:
      - "8090:8080"
    depends_on:
      - staff-api
    
  #############################################################################################
  ###                           RABBITMQ                                                    ###
  #############################################################################################
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - data-rabbit:/var/lib/rabbitmq/mnesia/rabbit@app-rabbitmq:cached
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms"]
      interval: 5s
      timeout: 5s
      retries: 5

  app-db:
    image: postgres
    container_name: app-db
    ports:
      - "5433:5432"  # +1 to avoid conflict with coms db
    environment:
      POSTGRES_PASSWORD: "password"
      POSTGRES_DB: "appdb"
    volumes:
      - data-postgres-appdb:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  #############################################################################################
  ### Common Object Management Service                                                      ###
  #############################################################################################
  coms:
    image: bcgovimages/common-object-management-service:0.4.2
    container_name: coms
    ports:
      - 3000:3000
    environment:
      BASICAUTH_ENABLED: "true"
      BASICAUTH_USERNAME: "username"
      BASICAUTH_PASSWORD: "password"
      OBJECTSTORAGE_ACCESSKEYID: ${OBJECTSTORAGE__ACCESSKEY:-username}
      OBJECTSTORAGE_BUCKET: ${OBJECTSTORAGE__BUCKET:-traffic-ticket-dev}
      OBJECTSTORAGE_ENDPOINT: ${OBJECTSTORAGE__ENDPOINT:-http://minio:9000}
      OBJECTSTORAGE_KEY: "/"
      OBJECTSTORAGE_SECRETACCESSKEY: ${OBJECTSTORAGE__SECRETKEY:-password}
      DB_ENABLED: "true"
      DB_HOST: "coms-db"
      DB_USERNAME: "postgres"
      DB_PASSWORD: "password"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      coms-db-migratation:
        condition: service_completed_successfully
      minio-initialize:
        condition: service_completed_successfully

  coms-db-migratation:
    image: bcgovimages/common-object-management-service:0.4.2
    container_name: coms-db-migratation
    environment:
      DB_ENABLED: "true"
      DB_HOST: "coms-db"
      DB_USERNAME: "postgres"
      DB_PASSWORD: "password"
    command: ["npm", "run", "migrate"]
    depends_on:
      coms-db:
        condition: service_healthy

  #############################################################################################
  ### Common Object Management Service - database                                           ###
  #############################################################################################
  coms-db:
    image: postgres
    container_name: coms-db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: "password"
      POSTGRES_DB: "coms"
    volumes:
      - data-postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  #############################################################################################
  ###                           Minio                                                       ###
  ###                                                                                       ###
  ### MINIO_SITE_REGION - not sure if this is required, but matching what is in the client  ###
  ### lists a specific version as later versions no longer support fs see JIRA 2272         ###
  #############################################################################################
  minio:
    container_name: minio
    image: minio/minio:RELEASE.2022-10-24T18-35-07Z
    ports:
      - 9100:9000
      - 9101:9001
    #volumes:
    #  - data-minio:/data
    environment:
      MINIO_ROOT_USER: "username"
      MINIO_ROOT_PASSWORD: "password"
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio-initialize:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set dockerminio http://minio:9000 username password;
      /usr/bin/mc mb dockerminio/traffic-ticket-dev;
      exit 0;
      "

  #############################################################################################
  ###                                 ClamAV                                                ###
  #############################################################################################
  clamav:
    container_name: clamav
    image: clamav/clamav:1.0
    environment:
      CLAMAV_NO_MILTERD: "true" # no sendmail filter
    ports:
      - 3310:3310
    volumes:
      - data-clamav:/var/lib/clamav
    healthcheck:      
      # clamdcheck.sh is in /usr/local/bin, in the bcgov image, it is in /opt/app-root
      test: ["CMD-SHELL", "/usr/local/bin/clamdcheck.sh"]
      interval: 5s
      timeout: 5s
      retries: 5

  #############################################################################################
  ###                                 REDIS server and UI                                   ###
  #############################################################################################
  redis:
    container_name: redis
    image: 'bitnami/redis:latest'
    environment:
      - REDIS_PASSWORD=password
    ports:
      - 6379:6379
    volumes:
      - data-redis:/data
    healthcheck:      
      test: ["CMD-SHELL", "redis-cli -a password ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis-ui:
    container_name: redis-ui
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=password
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - 8081:8081
      
  #############################################################################################
  ###                                 Fake Email server                                     ###
  #############################################################################################
  smtp-server:
    container_name: smtp-server
    image: gessnerfl/fake-smtp-server:2.1.4
    environment:
      - "SERVER_PORT=8080"
      - "FAKESMTP_PORT=5025"
    ports:
      - "5125:8080"
      - "5025:5025"
      
  #############################################################################################
  ###                                 Static Maintenance Site                               ###
  #############################################################################################
  maintenance-site:
    container_name: maintenance-site
    build:
      context: ./infrastructure/static-site/maintenance
      dockerfile: ./Dockerfile
    ports:
      - "8100:8080"


volumes:
  data-clamav:
  data-minio:
  data-oracle:
  data-postgres:
  data-postgres-appdb:
  data-rabbit:
  data-redis:
