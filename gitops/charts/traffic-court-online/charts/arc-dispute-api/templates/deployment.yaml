apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "arc-dispute-api.fullname" . }}
  labels:
    app.openshift.io/runtime: dotnet
    {{- include "arc-dispute-api.labels" . | nindent 4 }}
spec:
  minReadySeconds: 30
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "arc-dispute-api.selectorLabels" . | nindent 6 }}
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: "9090"
        vault.hashicorp.com/agent-inject: 'true'
        vault.hashicorp.com/agent-pre-populate-only: 'true'
        vault.hashicorp.com/auth-path: auth/k8s-silver
        vault.hashicorp.com/namespace: platform-services
        vault.hashicorp.com/role: {{ .Values.global.vault.role }}  # licenseplate-nonprod or licenseplate-prod are your options
        vault.hashicorp.com/agent-inject-secret-secrets.env: {{ .Values.global.vault.role }}/{{ .Values.global.vault.path }}arc-dispute-api
        vault.hashicorp.com/agent-inject-template-secrets.env: |
          {{`{{- with secret `}}"{{ .Values.global.vault.role }}/{{ .Values.global.vault.path }}arc-dispute-api"{{` }}
          {{- range $k, $v := .Data.data }}
          {{ $k }}='{{ $v }}'{{ end -}}
          {{- end `}} }}
      labels:
        {{- include "arc-dispute-api.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Values.global.licenseplate }}-vault
      containers:
        - env:
          {{- $env := merge (.Values.env | default dict) (.Values.global.env | default dict) -}}
          {{ range $k, $v := $env }}
          - name: {{ $k | quote }}
            value: {{ $v | quote }}
          {{- end }}
          - name: TZ
            value: America/Vancouver
          - name: ASPNETCORE_URLS
            value: http://*:8080;http://*:9090
          # use workstation garbage collector
          - name: DOTNET_gcServer
            value: 0
          name: {{ .Chart.Name }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          # command: ["/bin/sh"]
          # args: ["-c", "while true; do echo hello; sleep 10;done"]          
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
